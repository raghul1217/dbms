import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;

public class PayrollSystemGUI extends JFrame {
    // JDBC URL, username, and password of MySQL server
    private static final String URL = "jdbc:mysql://localhost:3306/sangavi";
    private static final String USER = "root";
    private static final String PASSWORD = "root";

    // JDBC variables for opening, closing, and managing connection
    private Connection connection;
    private PreparedStatement preparedStatement;
    private ResultSet resultSet;

    // GUI components
    private JTextField nameField;
    private JTextField salaryField;
    private JTextArea employeeListArea;

    public PayrollSystemGUI() {
        initializeUI();
        initializeDatabase();
    }

    private void initializeUI() {
        setTitle("Payroll System");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(3, 2));

        JLabel nameLabel = new JLabel("Name:");
        nameField = new JTextField();
        JLabel salaryLabel = new JLabel("Salary:");
        salaryField = new JTextField();

        JButton addButton = new JButton("Add Employee");
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addEmployee();
            }
        });

        inputPanel.add(nameLabel);
        inputPanel.add(nameField);
        inputPanel.add(salaryLabel);
        inputPanel.add(salaryField);
        inputPanel.add(addButton);

        employeeListArea = new JTextArea();
        employeeListArea.setEditable(false);

        JScrollPane scrollPane = new JScrollPane(employeeListArea);

        mainPanel.add(inputPanel, BorderLayout.NORTH);
        mainPanel.add(scrollPane, BorderLayout.CENTER);

        add(mainPanel);

        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void initializeDatabase() {
        try {
            connection = DriverManager.getConnection(URL, USER, PASSWORD);

            // Creating table if not exists
            createEmployeeTable();

            // Display employee list
            displayEmployeeList();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void createEmployeeTable() throws SQLException {
        String createEmployeeTable = "CREATE TABLE IF NOT EXISTS employees (" +
                "id INT PRIMARY KEY AUTO_INCREMENT," +
                "name VARCHAR(255)," +
                "salary DOUBLE)";

        preparedStatement = connection.prepareStatement(createEmployeeTable);
        preparedStatement.execute();
    }

    private void displayEmployeeList() throws SQLException {
        String selectQuery = "SELECT * FROM employees";

        preparedStatement = connection.prepareStatement(selectQuery);
        resultSet = preparedStatement.executeQuery();

        StringBuilder employeeList = new StringBuilder("Employee List:\nID\tName\t\tSalary\n");

        while (resultSet.next()) {
            int id = resultSet.getInt("id");
            String name = resultSet.getString("name");
            double salary = resultSet.getDouble("salary");

            employeeList.append(id).append("\t").append(name).append("\t\t").append(salary).append("\n");
        }

        employeeListArea.setText(employeeList.toString());
    }

    private void addEmployee() {
        String name = nameField.getText();
        String salaryText = salaryField.getText();

        if (name.isEmpty() || salaryText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name and Salary cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            double salary = Double.parseDouble(salaryText);

            String insertQuery = "INSERT INTO employees (name, salary) VALUES (?, ?)";

            preparedStatement = connection.prepareStatement(insertQuery);
            preparedStatement.setString(1, name);
            preparedStatement.setDouble(2, salary);

            int rowsAffected = preparedStatement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Employee added successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                displayEmployeeList();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add employee. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(this, "Invalid salary format. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new PayrollSystemGUI());
    }
}
