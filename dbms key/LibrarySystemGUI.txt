import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;

public class LibrarySystemGUI extends JFrame {
    // JDBC URL, username, and password of MySQL server
    private static final String URL = "jdbc:mysql://localhost:3306/sangavi";
    private static final String USER = "root";
    private static final String PASSWORD = "root";

    // JDBC variables for opening, closing, and managing connection
    private Connection connection;
    private PreparedStatement preparedStatement;
    private ResultSet resultSet;

    // GUI components
    private JTextField titleField;
    private JTextField authorField;
    private JTextArea bookListArea;

    public LibrarySystemGUI() {
        initializeUI();
        initializeDatabase();
    }

    private void initializeUI() {
        setTitle("Library Information System");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(3, 2));

        JLabel titleLabel = new JLabel("Title:");
        titleField = new JTextField();
        JLabel authorLabel = new JLabel("Author:");
        authorField = new JTextField();

        JButton addButton = new JButton("Add Book");
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addBook();
            }
        });

        inputPanel.add(titleLabel);
        inputPanel.add(titleField);
        inputPanel.add(authorLabel);
        inputPanel.add(authorField);
        inputPanel.add(addButton);

        bookListArea = new JTextArea();
        bookListArea.setEditable(false);

        JScrollPane scrollPane = new JScrollPane(bookListArea);

        mainPanel.add(inputPanel, BorderLayout.NORTH);
        mainPanel.add(scrollPane, BorderLayout.CENTER);

        add(mainPanel);

        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void initializeDatabase() {
        try {
            connection = DriverManager.getConnection(URL, USER, PASSWORD);

            // Creating table if not exists
            createBookTable();

            // Display book list
            displayBookList();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void createBookTable() throws SQLException {
        String createBookTable = "CREATE TABLE IF NOT EXISTS books (" +
                "id INT PRIMARY KEY AUTO_INCREMENT," +
                "title VARCHAR(255)," +
                "author VARCHAR(255)," +
                "available BOOLEAN)";

        preparedStatement = connection.prepareStatement(createBookTable);
        preparedStatement.execute();
    }

    private void displayBookList() throws SQLException {
        String selectQuery = "SELECT * FROM books";

        preparedStatement = connection.prepareStatement(selectQuery);
        resultSet = preparedStatement.executeQuery();

        StringBuilder bookList = new StringBuilder("Book List:\nID\tTitle\t\tAuthor\t\tAvailable\n");

        while (resultSet.next()) {
            int id = resultSet.getInt("id");
            String title = resultSet.getString("title");
            String author = resultSet.getString("author");
            boolean available = resultSet.getBoolean("available");

            bookList.append(id).append("\t").append(title).append("\t\t").append(author).append("\t\t").append(available).append("\n");
        }

        bookListArea.setText(bookList.toString());
    }

    private void addBook() {
        String title = titleField.getText();
        String author = authorField.getText();

        if (title.isEmpty() || author.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Title and Author cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Insert book record
            String insertBookQuery = "INSERT INTO books (title, author, available) VALUES (?, ?, ?)";
            preparedStatement = connection.prepareStatement(insertBookQuery);
            preparedStatement.setString(1, title);
            preparedStatement.setString(2, author);
            preparedStatement.setBoolean(3, true); // initially, the book is available
            preparedStatement.executeUpdate();

            // Display updated book list
            displayBookList();

            JOptionPane.showMessageDialog(this, "Book added successfully", "Success", JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to add book. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new LibrarySystemGUI());
    }
}
